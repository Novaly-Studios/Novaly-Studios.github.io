"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[325],{44320:function(e){e.exports=JSON.parse('{"functions":[{"name":"_ApplyMetatable","desc":"","params":[{"name":"Root","desc":"The root the metatable should be applied to","lua_type":"ReplicationStore"}],"returns":[],"function_type":"static","private":true,"source":{"line":266,"path":"Libraries/Replication/init.lua"}},{"name":"new","desc":"","params":[{"name":"RemoteEvent","desc":"The remote event that is fired for replication","lua_type":"RemoteEvent"},{"name":"IsServer","desc":"A boolean corresponding to whether this is on the client or server","lua_type":"boolean"}],"returns":[{"desc":"","lua_type":"ReplicationContainerType"}],"function_type":"static","source":{"line":282,"path":"Libraries/Replication/init.lua"}},{"name":"New","desc":"Mirrors .new","params":[],"returns":[],"function_type":"static","deprecated":{"version":"v0.1","desc":null},"source":{"line":307,"path":"Libraries/Replication/init.lua"}},{"name":"GetNextSequence","desc":"Increments one to the internal sequence and returns it","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":311,"path":"Libraries/Replication/init.lua"}},{"name":"_CheckPath","desc":"Checks if a path exists, and if it does, fires it with the passed value","params":[{"name":"PathName","desc":"","lua_type":"string"},{"name":"Value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"source":{"line":320,"path":"Libraries/Replication/init.lua"}},{"name":"_InitLogging","desc":"Starts remote listener logging","params":[],"returns":[],"function_type":"method","private":true,"source":{"line":330,"path":"Libraries/Replication/init.lua"}},{"name":"Commit","desc":"Commits a change to the replication container","params":[{"name":"Data","desc":"The data to be commited","lua_type":"{[any]: any}"},{"name":"InitialSyncPrint","desc":"Should the path be printed out?","lua_type":"boolean"}],"returns":[],"function_type":"method","source":{"line":355,"path":"Libraries/Replication/init.lua"}},{"name":"InitClient","desc":"Client method; syncs the store","params":[],"returns":[],"function_type":"method","realm":["Client"],"source":{"line":374,"path":"Libraries/Replication/init.lua"}},{"name":"InitServer","desc":"Server method; receives client requests","params":[],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":439,"path":"Libraries/Replication/init.lua"}},{"name":"Destroy","desc":"Destroys the container, cleans up all events that exist inside of it to avoid memory leaks","params":[],"returns":[],"function_type":"method","source":{"line":466,"path":"Libraries/Replication/init.lua"}},{"name":"Get","desc":"Obtains down a path; does not error","params":[{"name":"UncorrectedPath","desc":"","lua_type":"ReplicationPath"},{"name":"IsPathAlreadyCorrected","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","source":{"line":479,"path":"Libraries/Replication/init.lua"}},{"name":"Set","desc":"Sets down a path; constructs tables if none are present along the way","params":[{"name":"UncorrectedPath","desc":"","lua_type":"ReplicationPath"},{"name":"Value","desc":"","lua_type":"any"},{"name":"SendTo","desc":"","lua_type":"{Player}?"},{"name":"NoEvent","desc":"","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":507,"path":"Libraries/Replication/init.lua"}},{"name":"_GetAwaitEventStringPath","desc":"Creates or obtains the event corresponding to a path\'s value changing","params":[{"name":"AwaitingPath","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"{Connect: (_, Bind) -> {Disconnect: () -> ()}, Wait: () -> ()}"}],"function_type":"method","private":true,"source":{"line":638,"path":"Libraries/Replication/init.lua"}},{"name":"GetAwaitEvent","desc":"Creates or obtains the event corresponding to a path\'s value changing","params":[{"name":"Path","desc":"","lua_type":"ReplicationPath"}],"returns":[{"desc":"","lua_type":"BindableEvent"}],"function_type":"method","source":{"line":681,"path":"Libraries/Replication/init.lua"}},{"name":"_ReleaseAwaitEvent","desc":"Releases an event reference so it can be destroyed if necessary","params":[{"name":"AwaitingPath","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","private":true,"source":{"line":688,"path":"Libraries/Replication/init.lua"}},{"name":"Await","desc":"Waits for a value","params":[{"name":"UncorrectedPath","desc":"","lua_type":"ReplicationPath"},{"name":"Timeout","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","source":{"line":719,"path":"Libraries/Replication/init.lua"}},{"name":"SetUnchanging","desc":"Ensures a key will only change once, useful for avoiding unnecessary replication w/ large unchanging data\\nTODO: convert key using standard procedure","params":[{"name":"Key","desc":"","lua_type":"ReplicationKey"}],"returns":[],"function_type":"method","source":{"line":778,"path":"Libraries/Replication/init.lua"}}],"properties":[{"name":"SupressWriteWarning","desc":"","lua_type":"boolean -- Should the container output warnings?","source":{"line":247,"path":"Libraries/Replication/init.lua"}}],"types":[{"name":"ReplicatedKey","desc":"","lua_type":"string | number","source":{"line":7,"path":"Libraries/Replication/init.lua"}},{"name":"ReplicationPath","desc":"","lua_type":"{[number]: ReplicationKey}","source":{"line":11,"path":"Libraries/Replication/init.lua"}},{"name":"ReplicationStore","desc":"","lua_type":"{[ReplicationKey]: any}","private":true,"source":{"line":16,"path":"Libraries/Replication/init.lua"}},{"name":"ReplicationChange","desc":"","fields":[{"name":"NoEvent","lua_type":"boolean","desc":"Stating if there should be an event or not on ReplicationChange"},{"name":"Path","lua_type":"ReplicationPath","desc":""},{"name":"Value","lua_type":"any","desc":""}],"private":true,"source":{"line":24,"path":"Libraries/Replication/init.lua"}},{"name":"ReplicationChanges","desc":"","lua_type":"{[number]: ReplicationChange}","private":true,"source":{"line":33,"path":"Libraries/Replication/init.lua"}},{"name":"ReplicationContainerType","desc":"","fields":[{"name":"UnchangingKeys","lua_type":"{[ReplicationKey]: number","desc":""},{"name":"Awaiting","lua_type":"{[string]: BindableEvent}","desc":""},{"name":"AwaitingRefs","lua_type":"{[string]: number}","desc":""},{"name":"EventConnection","lua_type":"RBXScriptConnection?","desc":""},{"name":"PreSyncData","lua_type":"ReplicationChanges","desc":""},{"name":"Changes","lua_type":"ReplicationChanges","desc":""},{"name":"Store","lua_type":"ReplicationStore","desc":""},{"name":"IsServer","lua_type":"boolean","desc":""},{"name":"RemoteEvent","lua_type":"any","desc":""},{"name":"Synced","lua_type":"boolean","desc":""},{"name":"Sequence","lua_type":"number","desc":""}],"source":{"line":48,"path":"Libraries/Replication/init.lua"}},{"name":"GenericMetatable","desc":"Ask adam why this exists","private":true,"source":{"line":252,"path":"Libraries/Replication/init.lua"}}],"name":"ReplicationContainer","desc":"ReplicationContainer controls a replicated nested object which synchronises between the server & client, and supports getting, setting, awaiting, and hooking into changed events, along certain paths in that structure","source":{"line":243,"path":"Libraries/Replication/init.lua"}}')}}]);