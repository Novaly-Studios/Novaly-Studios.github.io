"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[395],{71853:function(e){e.exports=JSON.parse('{"functions":[{"name":"Copy1D","desc":"Copies the passed array. This is useful when attempting to make changes on an array, but you don\'t want to edit the original.\\n    \\n    local table = {}\\n    local table2 = table -- this does not copy, this is just a reference, any changes to table2 will affect table\\n    local table2 = Array.Copy1D(table) -- this is the correct way to copy","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"}],"returns":[{"desc":"","lua_type":"{[number]: any}"}],"function_type":"static","source":{"line":13,"path":"Libraries/TableUtil/Array/Copy1D.lua"}},{"name":"Cut1D","desc":"Cuts a given array from the given index (inclusive) to the ending index (exclusive)\\nThe same as the pythonic syntax array[5:7]","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"},{"name":"From","desc":"","lua_type":"number"},{"name":"To","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"{[number]: any}"}],"function_type":"static","source":{"line":12,"path":"Libraries/TableUtil/Array/Cut1D.lua"}},{"name":"Filter1D","desc":"Filters an array with a given condition function","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"},{"name":"Condition","desc":"Should return true for items you want in your filtered array, false if you want them to be discarded","lua_type":"(Value: any, ItemIndex: number) -> boolean"}],"returns":[{"desc":"","lua_type":"{[number]: any}"}],"function_type":"static","source":{"line":9,"path":"Libraries/TableUtil/Array/Filter1D.lua"}},{"name":"FoldLeft1D","desc":"Not exactly sure the purpose of this one, ask Adam","params":[],"returns":[],"function_type":"static","tags":["Unused"],"source":{"line":7,"path":"Libraries/TableUtil/Array/FoldLeft1D.lua"}},{"name":"FoldRight1D","desc":"Not exactly sure the purpose of this one, ask Adam","params":[],"returns":[],"function_type":"static","tags":["Unused"],"source":{"line":7,"path":"Libraries/TableUtil/Array/FoldRight1D.lua"}},{"name":"Insert1D","desc":"Inserts a given value into a given array at the specific position\\nNot sure the benefits of this over table.insert, ask Adam","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"},{"name":"Value","desc":"","lua_type":"any"},{"name":"At","desc":"","lua_type":"number"}],"returns":[{"desc":"New array with the inserted value","lua_type":"{[number]: any}"}],"function_type":"static","source":{"line":12,"path":"Libraries/TableUtil/Array/Insert1D.lua"}},{"name":"Map1D","desc":"Transforms a given array based on the operator function","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"},{"name":"Operation","desc":"","lua_type":"(Value: any, ItemIndex: number) -> any"}],"returns":[{"desc":"the transformed array","lua_type":"{[number]: any}"}],"function_type":"static","source":{"line":9,"path":"Libraries/TableUtil/Array/Map1D.lua"}},{"name":"Merge1D","desc":"Merges arguments into an array","params":[{"name":"...","desc":"Arguments to merge together","lua_type":"any..."}],"returns":[{"desc":"","lua_type":"{[number]: any}"}],"function_type":"static","source":{"line":8,"path":"Libraries/TableUtil/Array/Merge1D.lua"}},{"name":"Remove1D","desc":"Remove an element from an array based off of the given index","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"},{"name":"Index","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"{[number]: any}"}],"function_type":"static","source":{"line":9,"path":"Libraries/TableUtil/Array/Remove1D.lua"}},{"name":"Reverse1D","desc":"Reverses an array","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"}],"returns":[{"desc":"Array but reversed","lua_type":"{[number]: any}"}],"function_type":"static","source":{"line":8,"path":"Libraries/TableUtil/Array/Reverse1D.lua"}},{"name":"SelectFirst1D","desc":"Returns the first value that matches the given condition","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"},{"name":"Condition","desc":"","lua_type":"(Value: any, Index: number) -> boolean"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"static","source":{"line":9,"path":"Libraries/TableUtil/Array/SelectFirst1D.lua"}},{"name":"SelectLast1D","desc":"Returns the last value that matches the given condition","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"},{"name":"Condition","desc":"","lua_type":"(Value: any, Index: number) -> boolean"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"static","source":{"line":9,"path":"Libraries/TableUtil/Array/SelectLast1D.lua"}},{"name":"Shuffle1D","desc":"Randomly shuffles the array based on the passed seed. If no seed is passed, os.clock() is used as the default","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"},{"name":"Seed","desc":"","lua_type":"number"}],"returns":[{"desc":"shuffled array","lua_type":"{[number]: any}"}],"function_type":"static","source":{"line":9,"path":"Libraries/TableUtil/Array/Shuffle1D.lua"}},{"name":"Sort1D","desc":"Sorts the given array based on the condition\\nreturn {[number]: any}","params":[{"name":"Array","desc":"","lua_type":"{[number]: any}"},{"name":"Comparator","desc":"where typeof(any1) == typeof(any2)","lua_type":"(any1, any2) -> boolean"}],"returns":[],"function_type":"static","source":{"line":9,"path":"Libraries/TableUtil/Array/Sort1D.lua"}}],"properties":[],"types":[],"name":"Array","desc":"Field of TableUtil, should be accessed by TableUtil.Array\\nA collection of functons to work with arrays, which are numerical key table objects in Luau","source":{"line":6,"path":"Libraries/TableUtil/Array/init.lua"}}')}}]);